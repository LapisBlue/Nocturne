// Apply Gradle plugins
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'checkstyle'

    id 'net.minecrell.gitpatcher' version '0.7.1'

    id 'com.github.hierynomus.license' version '0.12.1'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

defaultTasks 'clean', 'licenseFormat', 'build'

// Project information
allprojects {
    group = 'blue.lapis.nocturne'
    version = '1.0.0-SNAPSHOT'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

patches {
    submodule = 'lib/FernFlower'
    target = file('FernFlower')
    patches = file('patches')
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

project('FernFlower') {
    apply from: rootProject.file('fernflower.gradle')
    compileJava.dependsOn rootProject.tasks.applyPatches
}

// Project repositories
repositories {
    mavenCentral()
}

// Project dependencies
dependencies {
    compile 'com.google.guava:guava:18.0'
    compile project('FernFlower')

    testCompile 'junit:junit:4.12'
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'

    options.compilerArgs += [
            '-Xlint:unchecked',
    ]
}

test.testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
}

processResources {
    from 'LICENSE'
}

jar {
    classifier = 'base'

    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': 'blue.lapis.nocturne.Main'
        )
    }
}

shadowJar {
    classifier = ''
}

// License header formatting
license {
    header = file('LICENSE')
    include '**/*.java'

    ignoreFailures = false
    strictCheck = true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// check code style
checkstyle {
    toolVersion = '6.12.1'

    configFile = file('etc/checkstyle.xml')
    configProperties = [
            'basedir': project.projectDir,
            'suppressions': project.file('etc/checkstyle-suppressions.xml'),
            'severity': 'warning'
    ]
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from tasks.processResources
}

artifacts {
    archives shadowJar
    archives sourceJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}
